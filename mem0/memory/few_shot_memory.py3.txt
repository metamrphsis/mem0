import logging
import uuid
from datetime import datetime
from typing import Dict, List, Optional, Tuple, Union, Any

import pytz
import os
import sqlite3

from mem0.configs.base import MemoryConfig
from mem0.configs.enums import MemoryType
from mem0.memory.base import MemoryBase
from mem0.memory.setup import setup_config, get_user_id
from mem0.utils.factory import EmbedderFactory, VectorStoreFactory
from mem0.vector_stores.configs import VectorStoreConfig

logger = logging.getLogger(__name__)

# Setup user config
setup_config()

class FewShotExample:
    """Represents a few-shot example with question, answer, and metadata."""
    
    def __init__(self, 
                 question: str, 
                 answer: str, 
                 example_id: Optional[str] = None,
                 metadata: Optional[Dict] = None,
                 score: Optional[float] = None):
        self.question = question
        self.answer = answer
        self.id = example_id or str(uuid.uuid4())
        self.metadata = metadata or {}
        self.score = score
    
    def format(self, template: Optional[str] = None) -> str:
        """Format the example using the provided template or default format."""
        if template:
            return template.format(question=self.question, answer=self.answer)
        return f"Question: {self.question}\nAnswer: {self.answer}"
    
    @classmethod
    def from_dict(cls, data: Dict) -> 'FewShotExample':
        """Create a FewShotExample from a dictionary."""
        return cls(
            question=data.get("question", ""),
            answer=data.get("answer", ""),
            example_id=data.get("id"),
            metadata=data.get("metadata", {}),
            score=data.get("score")
        )

    def to_dict(self) -> Dict:
        """Convert to dictionary representation."""
        return {
            "id": self.id,
            "question": self.question,
            "answer": self.answer,
            "metadata": self.metadata,
            "score": self.score
        }


class MultiDatabaseManager:
    """Manages multiple vector databases for storing and retrieving examples."""
    
    def __init__(self, base_config: MemoryConfig):
        """
        Initialize the MultiDatabaseManager with configurations for multiple databases.
        
        Args:
            base_config: Base memory configuration
        """
        self.base_config = base_config
        self.vector_stores = {}
        self.embedding_model = None
        
        # Initialize the embedding model
        self.init_embedding_model()
        
        # Initialize vector stores
        self.init_vector_stores()
    
    def init_embedding_model(self):
        """Initialize the embedding model to use for all vector stores."""
        self.embedding_model = EmbedderFactory.create(
            self.base_config.embedder.provider,
            self.base_config.embedder.config,
            self.base_config.vector_store.config,
        )
    
    def init_vector_stores(self):
        """Initialize all supported vector stores."""
        # Define store configs - set to empty initially
        store_configs = {}
        
        # Add FAISS as our primary vector store
        # This is the most reliable option and works without external dependencies
        store_configs["faiss"] = VectorStoreConfig(
            provider="faiss",
            config={
                "collection_name": "mem0_few_shot_faiss",
                "embedding_model_dims": self.base_config.embedder.config.get("embedding_dims", 1536),
                "path": os.path.join(mem0_dir, "vector_store"),
            }
        )

        # Try to initialize PostgreSQL if available
        try:
            # PostgreSQL with pgvector
            store_configs["postgres"] = VectorStoreConfig(
                provider="pgvector",
                config={
                    "dbname": "mem0",
                    "collection_name": "mem0_few_shot_pg",
                    "embedding_model_dims": self.base_config.embedder.config.get("embedding_dims", 1536),
                    "user": "postgres",
                    "password": "postgres",
                    "host": "localhost",
                    "port": 5432,
                    "diskann": False,
                    "hnsw": True
                }
            )
        except Exception as e:
            logger.warning(f"Failed to create PostgreSQL config: {e}")
        
        # Try to initialize Elasticsearch if available
        try:
            # Elasticsearch
            store_configs["elasticsearch"] = VectorStoreConfig(
                provider="elasticsearch",
                config={
                    "host": "localhost",
                    "port": 9200,
                    "collection_name": "mem0_few_shot_es",
                    "embedding_model_dims": self.base_config.embedder.config.get("embedding_dims", 1536),
                    "api_key": "es_api_key_here",  # Add API key to address validation error
                    "username": "elastic",  # Alternative credentials
                    "password": "elastic"   # Alternative credentials
                }
            )
        except Exception as e:
            logger.warning(f"Failed to create Elasticsearch config: {e}")
            
        # Try to initialize Vertex AI if available and project ID set
        try:
            project_id = self.base_config.vector_store.config.get("project_id", "")
            if project_id:
                # Vertex AI Vector Search
                store_configs["vertex_ai"] = VectorStoreConfig(
                    provider="vertex_ai_vector_search",
                    config={
                        "project_id": project_id,
                        "region": "us-central1",
                        "collection_name": "mem0_few_shot_vertex",
                        "embedding_model_dims": self.base_config.embedder.config.get("embedding_dims", 1536),
                    }
                )
        except Exception as e:
            logger.warning(f"Failed to create Vertex AI config: {e}")
        
        # Try to initialize each store, logging errors but continuing
        for store_name, store_config in store_configs.items():
            try:
                store = VectorStoreFactory.create(
                    store_config.provider,
                    store_config.config
                )
                self.vector_stores[store_name] = store
                logger.info(f"Successfully initialized {store_name} vector store")
            except Exception as e:
                logger.warning(f"Failed to initialize {store_name} vector store: {e}")
                
        if not self.vector_stores:
            # Fallback to FAISS in-memory if no stores could be initialized
            logger.warning("No vector stores could be initialized, falling back to in-memory FAISS")
            try:
                faiss_config = VectorStoreConfig(
                    provider="faiss",
                    config={
                        "collection_name": "mem0_few_shot",
                        "embedding_model_dims": self.base_config.embedder.config.get("embedding_dims", 1536),
                        "in_memory": True,
                    }
                )
                self.vector_stores["faiss"] = VectorStoreFactory.create(
                    faiss_config.provider,
                    faiss_config.config
                )
            except Exception as e:
                logger.error(f"Failed to initialize in-memory FAISS: {e}")
                raise ValueError("Could not initialize any vector stores") from e
    
    @property
    def config(self):
        """Get the base configuration."""
        return self.base_config
    
    def insert(self, vectors: List[List[float]], ids: List[str], payloads: List[Dict[str, Any]]) -> List[str]:
        """
        Insert vectors into all available vector stores.
        
        Args:
            vectors: List of vectors to insert
            ids: List of IDs for the vectors
            payloads: List of payloads for the vectors
            
        Returns:
            List of IDs that were inserted
        """
        results = set()
        errors = []
        
        for store_name, store in self.vector_stores.items():
            try:
                store_ids = store.insert(vectors=vectors, ids=ids, payloads=payloads)
                if store_ids:
                    for id in store_ids:
                        results.add(id)
            except Exception as e:
                errors.append(f"{store_name}: {str(e)}")
                logger.error(f"Error inserting into {store_name}: {e}")
                
        if errors and not results:
            raise Exception(f"Failed to insert into any vector stores: {', '.join(errors)}")
            
        return list(results)
    
    def search(self, query: str, vectors: List[float], limit: int = 5, filters: Optional[Dict] = None) -> List[Any]:
        """
        Search across all vector stores and merge results.
        
        Args:
            query: Text query
            vectors: Query vector
            limit: Maximum number of results to return
            filters: Filters to apply to the search
            
        Returns:
            List of search results merged from all stores
        """
        all_results = []
        
        for store_name, store in self.vector_stores.items():
            try:
                store_results = store.search(query=query, vectors=vectors, limit=limit, filters=filters)
                all_results.extend(store_results)
            except Exception as e:
                logger.error(f"Error searching in {store_name}: {e}")
                
        # Sort results by score (assuming lower is better)
        # Note: This may need adjustment based on the actual scoring system of each vector store
        all_results.sort(key=lambda x: x.score if hasattr(x, "score") and x.score is not None else float('inf'))
        
        # Return top results up to limit
        return all_results[:limit]
    
    def delete(self, vector_id: str) -> bool:
        """
        Delete a vector from all stores.
        
        Args:
            vector_id: ID of the vector to delete
            
        Returns:
            True if deleted from at least one store, False otherwise
        """
        success = False
        
        for store_name, store in self.vector_stores.items():
            try:
                result = store.delete(vector_id=vector_id)
                success = success or result
            except Exception as e:
                logger.error(f"Error deleting from {store_name}: {e}")
                
        return success
    
    def update(self, vector_id: str, vector: Optional[List[float]] = None, payload: Optional[Dict] = None) -> bool:
        """
        Update a vector in all stores.
        
        Args:
            vector_id: ID of the vector to update
            vector: New vector (if updating)
            payload: New payload (if updating)
            
        Returns:
            True if updated in at least one store, False otherwise
        """
        success = False
        
        for store_name, store in self.vector_stores.items():
            try:
                result = store.update(vector_id=vector_id, vector=vector, payload=payload)
                success = success or result
            except Exception as e:
                logger.error(f"Error updating in {store_name}: {e}")
                
        return success
    
    def get(self, vector_id: str) -> Optional[Any]:
        """
        Get a vector from any store.
        
        Args:
            vector_id: ID of the vector to retrieve
            
        Returns:
            The vector data if found in any store, None otherwise
        """
        for store_name, store in self.vector_stores.items():
            try:
                result = store.get(vector_id=vector_id)
                if result:
                    return result
            except Exception as e:
                logger.error(f"Error getting from {store_name}: {e}")
                
        return None
    
    def list(self, filters: Optional[Dict] = None, limit: int = 100) -> List[List[Any]]:
        """
        List vectors from all stores.
        
        Args:
            filters: Filters to apply
            limit: Maximum number of results to return
            
        Returns:
            List of results from all stores
        """
        all_results = []
        
        for store_name, store in self.vector_stores.items():
            try:
                store_results = store.list(filters=filters, limit=limit)
                all_results.extend(store_results)
            except Exception as e:
                logger.error(f"Error listing from {store_name}: {e}")
                
        return all_results


class FewShotMemory(MemoryBase):
    """
    A memory system specialized for few-shot learning that stores and retrieves
    examples based on semantic similarity to optimize in-context learning.
    Uses multiple vector databases for redundancy and performance.
    """
    
    def __init__(self, config: MemoryConfig = None):
        """
        Initialize the FewShotMemory with the given configuration.
        
        Args:
            config: Configuration for memory, vector store, embedding model, etc.
        """
        self.config = config or MemoryConfig()
        
        # Initialize multi-database manager
        self.db_manager = MultiDatabaseManager(self.config)
        
        # Get embedding model from the manager
        self.embedding_model = self.db_manager.embedding_model
        
        # Set default user ID if not specified
        self.user_id = get_user_id()
        
    def add_example(self, 
                   question: str, 
                   answer: str, 
                   user_id: Optional[str] = None,
                   metadata: Optional[Dict] = None) -> str:
        """
        Add a new few-shot example to memory.
        
        Args:
            question: The example question/prompt
            answer: The corresponding answer/response
            user_id: User ID to associate with the example
            metadata: Additional metadata for the example
            
        Returns:
            The ID of the new example
        """
        # Prepare metadata
        metadata = metadata or {}
        user_id = user_id or self.user_id
        
        # Create payload
        payload = {
            "user_id": user_id,
            "memory_type": MemoryType.PROCEDURAL.value,
            "question": question,
            "answer": answer,
            "created_at": datetime.now(pytz.timezone("UTC")).isoformat(),
            # Store the user-provided metadata in a separate field
            "metadata": metadata
        }
        
        # Generate embedding for the question (we search based on question similarity)
        question_embedding = self.embedding_model.embed(question, "add")
        
        # Create a unique ID
        example_id = str(uuid.uuid4())
        
        # Insert into all vector stores through the manager
        ids = self.db_manager.insert(
            vectors=[question_embedding],
            ids=[example_id],
            payloads=[payload],
        )
        
        # Use the first ID returned or the one we generated
        result_id = ids[0] if ids else example_id
        
        logger.info(f"Added few-shot example with ID {result_id}")
        return result_id
    
    def get_examples(self, 
                    query: str, 
                    limit: int = 5, 
                    threshold: float = 0.7,
                    user_id: Optional[str] = None,
                    filters: Optional[Dict] = None) -> List[FewShotExample]:
        """
        Retrieve few-shot examples most relevant to the query.
        
        Args:
            query: The query to find examples for
            limit: Maximum number of examples to return
            threshold: Similarity threshold (0-1)
            user_id: Filter examples by user ID
            filters: Additional filters to apply
            
        Returns:
            List of FewShotExample objects sorted by relevance
        """
        # Prepare filters
        search_filters = filters or {}
        if user_id:
            search_filters["user_id"] = user_id
            
        # Process metadata filters - convert metadata.field to field for proper filtering
        processed_filters = {}
        for key, value in search_filters.items():
            if key.startswith("metadata."):
                # Extract the field name after "metadata."
                field_name = key.split(".", 1)[1]
                processed_filters[field_name] = value
            else:
                processed_filters[key] = value
        
        # Generate embedding for query
        query_embedding = self.embedding_model.embed(query, "search")
        
        # Search across all vector stores through the manager
        results = self.db_manager.search(
            query=query,
            vectors=query_embedding,
            limit=limit,
            filters=processed_filters
        )
        
        # Convert results to FewShotExample objects
        examples = []
        for item in results:
            # Skip examples below threshold (lower score is better)
            if hasattr(item, "score") and item.score is not None and item.score < threshold:
                payload = item.payload
                example = FewShotExample(
                    question=payload.get("question", ""),
                    answer=payload.get("answer", ""),
                    example_id=item.id,
                    metadata={k: v for k, v in payload.items() 
                            if k not in ["question", "answer", "user_id", "memory_type", "created_at"]},
                    score=item.score
                )
                examples.append(example)
                
        return examples
    
    def get_formatted_examples(self, 
                              query: str, 
                              limit: int = 5,
                              template: Optional[str] = None,
                              **kwargs) -> List[str]:
        """
        Get formatted few-shot examples for the query.
        
        Args:
            query: The query to find examples for
            limit: Maximum number of examples
            template: Optional format template with {question} and {answer} placeholders
            **kwargs: Additional arguments for get_examples
            
        Returns:
            List of formatted example strings
        """
        examples = self.get_examples(query, limit, **kwargs)
        return [example.format(template) for example in examples]
    
    def get_examples_as_context(self, 
                               query: str,
                               limit: int = 5,
                               preamble: str = "Here are some examples that might help:",
                               template: Optional[str] = None,
                               **kwargs) -> str:
        """
        Get formatted few-shot examples as a single context string.
        
        Args:
            query: The query to find examples for
            limit: Maximum number of examples
            preamble: Text to introduce the examples
            template: Optional format template
            **kwargs: Additional arguments for get_examples
            
        Returns:
            Formatted context string with examples
        """
        examples = self.get_formatted_examples(query, limit, template, **kwargs)
        if not examples:
            return ""
            
        return f"{preamble}\n\n" + "\n\n".join(examples)
    
    def delete_example(self, example_id: str) -> bool:
        """
        Delete a specific example by ID.
        
        Args:
            example_id: ID of the example to delete
            
        Returns:
            True if successful, False otherwise
        """
        try:
            return self.db_manager.delete(vector_id=example_id)
        except Exception as e:
            logger.error(f"Failed to delete example {example_id}: {e}")
            return False
    
    def get(self, example_id: str) -> Optional[FewShotExample]:
        """
        Retrieve a specific example by ID.
        
        Args:
            example_id: ID of the example to retrieve
            
        Returns:
            FewShotExample if found, None otherwise
        """
        try:
            result = self.db_manager.get(vector_id=example_id)
            if result and hasattr(result, "payload"):
                payload = result.payload
                return FewShotExample(
                    question=payload.get("question", ""),
                    answer=payload.get("answer", ""),
                    example_id=result.id,
                    metadata=payload.get("metadata", {}),
                )
        except Exception as e:
            logger.error(f"Failed to retrieve example {example_id}: {e}")
        return None
    
    def update(self, example_id: str, question: Optional[str] = None, 
               answer: Optional[str] = None, metadata: Optional[Dict] = None) -> bool:
        """
        Update an existing example.
        
        Args:
            example_id: ID of the example to update
            question: New question text (if updating)
            answer: New answer text (if updating)
            metadata: New metadata (if updating)
            
        Returns:
            True if successful, False otherwise
        """
        try:
            # Get existing example
            existing = self.db_manager.get(vector_id=example_id)
            if not existing:
                logger.error(f"Example {example_id} not found")
                return False
                
            payload = existing.payload.copy()
            
            # Update fields if provided
            if question is not None:
                payload["question"] = question
                # We need to update the vector for the new question
                question_embedding = self.embedding_model.embed(question, "update")
            else:
                question_embedding = None
                
            if answer is not None:
                payload["answer"] = answer
                
            if metadata is not None:
                # Initialize metadata field if it doesn't exist
                if "metadata" not in payload:
                    payload["metadata"] = {}
                
                # Update metadata values
                for k, v in metadata.items():
                    payload["metadata"][k] = v
            
            # Update timestamp
            payload["updated_at"] = datetime.now(pytz.timezone("UTC")).isoformat()
            
            # Update in all vector stores through the manager
            return self.db_manager.update(
                vector_id=example_id,
                vector=question_embedding,
                payload=payload
            )
        except Exception as e:
            logger.error(f"Failed to update example {example_id}: {e}")
            return False
    
    def get_all(self, user_id: Optional[str] = None, limit: int = 100) -> List[FewShotExample]:
        """
        Retrieve all few-shot examples, optionally filtered by user.
        
        Args:
            user_id: Optional user ID to filter by
            limit: Maximum number of examples to return
            
        Returns:
            List of FewShotExample objects
        """
        filters = {"memory_type": MemoryType.PROCEDURAL.value}
        if user_id:
            filters["user_id"] = user_id
            
        all_results = self.db_manager.list(filters=filters, limit=limit)
        
        examples = []
        for result_list in all_results:
            for item in result_list:
                payload = item.payload
                example = FewShotExample(
                    question=payload.get("question", ""),
                    answer=payload.get("answer", ""),
                    example_id=item.id,
                    metadata=payload.get("metadata", {})
                )
                examples.append(example)
            
        # Deduplicate examples by ID
        unique_examples = {}
        for example in examples:
            unique_examples[example.id] = example
            
        return list(unique_examples.values())
    
    def delete_all(self, user_id: Optional[str] = None) -> bool:
        """
        Delete all examples, optionally filtered by user.
        
        Args:
            user_id: Optional user ID to filter by
            
        Returns:
            True if successful, False otherwise
        """
        try:
            filters = {"memory_type": MemoryType.PROCEDURAL.value}
            if user_id:
                filters["user_id"] = user_id
                
            # Get all matching examples
            examples = self.get_all(user_id)
            
            # Track overall success
            success = True
            
            # Delete each example
            for example in examples:
                result = self.delete_example(example.id)
                success = success and result
                
            return success
        except Exception as e:
            logger.error(f"Failed to delete all examples: {e}")
            return False
    
    def history(self, example_id: str) -> List[Dict]:
        """
        Get the history of changes for an example.
        
        Args:
            example_id: ID of the example
            
        Returns:
            List of history entries (empty for now as history isn't tracked for examples)
        """
        # History tracking not implemented for few-shot examples
        return []
    
    def search(self, query: str, limit: int = 5, user_id: Optional[str] = None, **kwargs) -> List[FewShotExample]:
        """
        Search for examples matching the query (alias for get_examples).
        
        Args:
            query: The search query
            limit: Maximum number of results
            user_id: Optional user ID to filter by
            **kwargs: Additional arguments for get_examples
            
        Returns:
            List of matching FewShotExample objects
        """
        return self.get_examples(query, limit, user_id=user_id, **kwargs)
    
    def reset(self) -> bool:
        """
        Reset the memory by deleting all examples.
        
        Returns:
            True if successful, False otherwise
        """
        return self.delete_all()
        
    def delete(self, memory_id):
        """
        Delete a memory by ID. Required implementation for MemoryBase abstract method.
        
        Args:
            memory_id (str): ID of the memory to delete.
            
        Returns:
            bool: True if successful, False otherwise
        """
        return self.delete_example(memory_id)
